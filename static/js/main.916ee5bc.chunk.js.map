{"version":3,"sources":["Reducers/appStateReducer.js","StateFunctions/helperFunctions.js","Reducers/gameStateReducer.js","Reducers/rootreducer.js","StateFunctions/actionDispatcherFunctions.js","App.js","MiddlePageComponent/middlePageComponent.js","HeaderComponent/headerComponent.js","PersonalDetailsComponent/personalDetailsComponent.js","TicTacCellComponent/ticTacCellComponent.js","TicTacBoardComponent/ticTacBoardComponent.js","HistoryPageComponent/historyPageComponent.js","ScoreBoardComponent/scoreBoardComponent.js","GamePageComponent/gamePageComponent.js","LayoutComponent.js","serviceWorker.js","index.js"],"names":["initialState","currentPageNumber","player1Name","player2Name","player1Score","player2Score","collapseScoreBoardFlag","collapsedHistoryPageFlag","appStateReducer","state","arguments","length","undefined","action","type","Object","objectSpread","winnerId","payload","getPlayerNameFromId","playerId","playerNameArr","convertCellIdToRowCol","cellId","row","Math","floor","col","checkForRow","playerIdsArr","rowNum","i","includes","checkForCol","colNum","checkForDiagonal","forwardDiagonalCheckRequired","reverseDiagonalCheckRequired","checkForwardDiagonal","checkReverseDiagonal","getCellNumByRowCol","currentPlayerId","defaultCellIdArray","player1CellIdArr","player2CellIdArr","gameHistory","isGameFinished","isGameDrawnFlag","totalGames","numOfMatchesDrawn","numOfMatchesPlayer1Won","gameStateReducer","toConsumableArray","filter","id","push","rowColObj","console","log","checkForWinner","isGameDrawn","rootReducer","combineReducers","currentPageChangedActionDispatcher","currentPageNum","dispatcher","App","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleStartButtonClick","bind","assertThisInitialized","react_default","a","createElement","className","onClick","Component","connect","store","dispatch","MiddlePageComponent","Fragment","children","newGameBtnClickedHandler","href","PersonalDetaisComponent","currentPageChanged","_this$props","updatePlayer1Name","updatePlayer2Name","htmlFor","value","onChange","e","target","updatePlayer1NameActionDispatcher","updatePlayer2NameActionDispatcher","TicTacCellComponent","status","ticTacCellClickedHandler","getCellOnStatus","ticTacCellClickedActionDispatcher","TicTacBoardComponent","getTictacBoardCellArray","ticTacBoardArr","ticTacCellComponent","key","HistoryPageComponent","toggleHistoryPageHandler","historyPageContentStyleObj","width","overflow","toggleHisotoryPageButtonStyleObj","left","style","map","gameHistoryObj","idx","ScoreBoardComponent","toggleScoreBoardHandler","historyPageComponent","height","transition","GamePageComponent","nextProps","gameFinishActionDispatcherHandler","resetBtnClickedHandler","playerHeaderStyleObj","color","scoreBoardComponent","ticTacBoardComponent","gameFinishActionDispatcher","LayoutComponent","getLayoutPage","personalDetailsComponent","GamePageComponent_gamePageComponent","src_App","HeaderComponent_headerComponent","middlePageComponent","Boolean","window","location","hostname","match","createStore","applyMiddleware","thunk","ReactDOM","render","es","src_LayoutComponent","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.916ee5bc.chunk.js","sourcesContent":["const initialState = {\r\n    currentPageNumber : 1,\r\n    player1Name:'',\r\n    player2Name:'',\r\n    player1Score:0,\r\n    player2Score:0,\r\n    collapseScoreBoardFlag : false,\r\n    collapsedHistoryPageFlag : true,\r\n}\r\n\r\nconst appStateReducer = (state = initialState, action) => {\r\n    \r\n    switch(action.type){\r\n        \r\n        case 'TOGGLE_HISTORY_PAGE' :\r\n            \r\n            return {\r\n                ...state,\r\n                collapsedHistoryPageFlag : state.collapsedHistoryPageFlag === true ? false : true\r\n            }\r\n        case 'TOGGLE_SCORE_BOARD':\r\n\r\n            return {\r\n                ...state,\r\n                collapseScoreBoardFlag : state.collapseScoreBoardFlag === true ? false : true,\r\n            }\r\n        case 'GAME_FINISHED':\r\n            const  winnerId = action.payload;\r\n            \r\n            return {\r\n                ...state,\r\n                player1Score : winnerId === 1 ? (state.player1Score + 2) : state.player1Score,\r\n                player2Score : winnerId === 2 ? (state.player2Score + 2) : state.player2Score,\r\n            }\r\n        case 'PLAYER_1_NAME_UPDATED':\r\n            const player1Name = action.payload;\r\n            \r\n            return {\r\n                ...state,\r\n                player1Name,\r\n            }\r\n        case 'PLAYER_2_NAME_UPDATED':\r\n            const player2Name = action.payload;\r\n            \r\n            return {\r\n                ...state,\r\n                player2Name,\r\n            }\r\n        case 'NEW_GAME_BTN_CLICKED':\r\n            return {\r\n                ...initialState,\r\n            }\r\n        case 'CURRENT_PAGE_NUMBER_CHANGED':\r\n            \r\n            const currentPageNumber = action.payload;\r\n            \r\n            return {\r\n                ...state,\r\n                currentPageNumber\r\n            }\r\n        default :\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default appStateReducer;","import React from 'react'\r\n\r\nexport const getCellOnStatus = status => {\r\n    if(status === 'default'){\r\n        return <div className=\"default\"></div>\r\n    }\r\n    else if(status === 'red'){\r\n        return <div className=\"red-cross\"></div>\r\n    }\r\n    \r\n    return <div className=\"green-dot\"></div>\r\n}\r\n\r\nexport const checkForWinner = (cellId, playerIdsArr) => {\r\n\r\n    if(playerIdsArr.length < 3){\r\n        return false;\r\n    }\r\n\r\n    const rowColObj = convertCellIdToRowCol(cellId);\r\n    const rowNum = rowColObj.row;\r\n    const colNum = rowColObj.col;\r\n\r\n    if(checkForRow(playerIdsArr, rowNum) || checkForCol(playerIdsArr, colNum)){\r\n        return true;\r\n    }\r\n\r\n    if((rowNum === colNum || rowNum + colNum === 2) && checkForDiagonal(playerIdsArr, rowNum, colNum)){\r\n        console.log('rowNum, colNum', rowNum, colNum)\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nexport const getPlayerNameFromId = (playerId, playerNameArr) => {\r\n    \r\n    return playerNameArr[playerId-1];\r\n}\r\n\r\n\r\n\r\n/*\r\n    Private Functions \r\n*/\r\n\r\nconst convertCellIdToRowCol = cellId => {\r\n\r\n    return {\r\n        row: Math.floor((cellId-1)/3),\r\n        col: (cellId-1)%3,\r\n    }\r\n}\r\n\r\nconst checkForRow = (playerIdsArr, rowNum) => {\r\n\r\n    for(let i = 0; i<3; i++){\r\n\r\n        if(!playerIdsArr.includes((rowNum * 3 + i)+1))\r\n            return false;\r\n    }\r\n\r\n    return true\r\n}\r\n\r\nconst checkForCol = (playerIdsArr, colNum) => {\r\n\r\n    for(let i = 0; i<3; i++){\r\n        if(!playerIdsArr.includes((i * 3 + colNum)+1))\r\n            return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nconst checkForDiagonal = (playerIdsArr, rowNum, colNum) => {\r\n    \r\n    let forwardDiagonalCheckRequired = false;\r\n    let reverseDiagonalCheckRequired = false;\r\n\r\n    if(rowNum + colNum === 2){\r\n        forwardDiagonalCheckRequired = true;\r\n    }\r\n\r\n    if(rowNum === colNum){\r\n        reverseDiagonalCheckRequired = true;\r\n    }\r\n\r\n    if(forwardDiagonalCheckRequired && checkForwardDiagonal(playerIdsArr)){\r\n        return true;\r\n    }\r\n\r\n    if(reverseDiagonalCheckRequired && checkReverseDiagonal(playerIdsArr)){\r\n        return true;\r\n    }\r\n\r\n    return false;  \r\n}\r\n\r\nconst checkForwardDiagonal = (playerIdsArr) => {\r\n    \r\n    for(let i=0; i< 3; i++){\r\n        if(!playerIdsArr.includes(getCellNumByRowCol(i, 2-i)))\r\n            return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nconst checkReverseDiagonal = (playerIdsArr) => {\r\n\r\n    for(let i=0; i< 3; i++){\r\n        if(!playerIdsArr.includes(getCellNumByRowCol(i, i)))\r\n            return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nconst getCellNumByRowCol = (rowNum, colNum) => {\r\n    \r\n    return (rowNum * 3 + colNum) + 1;\r\n}\r\n\r\n","import { checkForWinner } from './../StateFunctions/helperFunctions';\r\n\r\nconst initialState = {\r\n    currentPlayerId : 1,\r\n    defaultCellIdArray : [1,2,3,4,5,6,7,8,9],\r\n    player1CellIdArr:[],\r\n    player2CellIdArr:[],\r\n    gameHistory: [],\r\n    isGameFinished : false,\r\n    winnerId : null,\r\n    isGameDrawnFlag : false,\r\n    totalGames : 0,\r\n    numOfMatchesDrawn:0,\r\n    numOfMatchesPlayer1Won : 0,\r\n}\r\n\r\nconst gameStateReducer = (state = initialState, action) => {\r\n    let { numOfMatchesDrawn, numOfMatchesPlayer1Won, gameHistory, totalGames } = state;\r\n\r\n    switch(action.type){\r\n        \r\n        case 'NEW_GAME_BTN_CLICKED' :\r\n\r\n            return {\r\n                ...initialState,\r\n                gameHistory : [],\r\n            }\r\n        case 'RESET_GAME_BTN_CLICKED':\r\n\r\n            return {\r\n                ...initialState,\r\n                gameHistory,\r\n                numOfMatchesDrawn,\r\n                numOfMatchesPlayer1Won,\r\n                totalGames\r\n            }\r\n        case 'TIC_TAC_CELL_CLICKED' :\r\n        \r\n            const cellId = action.payload[0];\r\n            let currentPlayerId = action.payload[1];\r\n            \r\n            let player1CellIdArr = [...state.player1CellIdArr];\r\n            let player2CellIdArr = [...state.player2CellIdArr];\r\n            let defaultCellIdArray = [...state.defaultCellIdArray];\r\n             \r\n            if(defaultCellIdArray.includes(cellId)){\r\n\r\n                defaultCellIdArray = defaultCellIdArray.filter(id => id !== cellId);\r\n                \r\n                currentPlayerId === 1 ? player1CellIdArr.push(cellId) : player2CellIdArr.push(cellId);\r\n\r\n                if(checkForWinner(cellId, currentPlayerId === 1 ? player1CellIdArr : player2CellIdArr)) {\r\n                    let gameHistory = state.gameHistory;\r\n\r\n                    gameHistory.push({\r\n                        isGameDrawn : false,\r\n                        winnerId : currentPlayerId,   \r\n                    })\r\n                    \r\n                    return {\r\n                        ...initialState,\r\n                        gameHistory,\r\n                        isGameFinished : true,\r\n                        winnerId : currentPlayerId,\r\n                        totalGames : totalGames + 1,\r\n                        numOfMatchesPlayer1Won : currentPlayerId === 1 ? numOfMatchesPlayer1Won + 1 : numOfMatchesPlayer1Won,\r\n                        numOfMatchesDrawn,\r\n                    }\r\n                }\r\n\r\n                if(defaultCellIdArray.length === 0){\r\n                    gameHistory.push({\r\n                        isGameDrawn : true,\r\n                        winnerId : null,   \r\n                    })\r\n\r\n                    return {\r\n                        ...state,\r\n                        isGameFinished : true,\r\n                        isGameDrawnFlag : true,\r\n                        totalGames : totalGames + 1,\r\n                        numOfMatchesDrawn : numOfMatchesDrawn + 1\r\n                    }\r\n                }\r\n\r\n                currentPlayerId = currentPlayerId === 1 ? 2 : 1;\r\n\r\n                return {\r\n                    ...state,\r\n                    currentPlayerId,\r\n                    defaultCellIdArray,\r\n                    player1CellIdArr,\r\n                    player2CellIdArr,\r\n                }\r\n            }\r\n\r\n            return state;\r\n        default :\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default gameStateReducer;","import { combineReducers } from 'redux';\r\n\r\nimport appStateReducer from './appStateReducer';\r\nimport gameStateReducer from './gameStateReducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    appStateReducer,\r\n    gameStateReducer,\r\n})\r\n\r\nexport default rootReducer;","export const currentPageChangedActionDispatcher = currentPageNum => dispatcher => {\r\n    \r\n    dispatcher({type:'CURRENT_PAGE_NUMBER_CHANGED', payload: currentPageNum + 1})\r\n}\r\n\r\nexport const ticTacCellClickedActionDispatcher = (id, currentPlayerId) => dispatcher => {\r\n    \r\n    dispatcher({type:'TIC_TAC_CELL_CLICKED', payload:[id, currentPlayerId]});\r\n}\r\n\r\nexport const newGameBtnClickedActionDispatcher = () => dispatcher => {\r\n    \r\n    dispatcher({type:'NEW_GAME_BTN_CLICKED'});\r\n}\r\n\r\nexport const resetBtnClickedActionDispatcher = () => dispatcher => {\r\n\r\n    dispatcher({type:'RESET_GAME_BTN_CLICKED'});\r\n}\r\n\r\nexport const updatePlayer1NameActionDispatcher = player1Name => dispatcher => {\r\n    dispatcher({type:'PLAYER_1_NAME_UPDATED', payload : player1Name})\r\n}\r\n\r\nexport const updatePlayer2NameActionDispatcher = player2Name => dispatcher => {\r\n    dispatcher({type:'PLAYER_2_NAME_UPDATED', payload : player2Name})\r\n}\r\n\r\nexport const gameFinishActionDispatcher = (winnerId) => dispatcher => {\r\n    dispatcher({type:'GAME_FINISHED', payload:winnerId})\r\n}\r\n\r\nexport const toggleScoreBoardHandlerActionDispacther = () => dispatcher => {\r\n    dispatcher({type:'TOGGLE_SCORE_BOARD'})\r\n}\r\n\r\nexport const toggleHistoryPageHandlerActionCreator = () => dispatcher => {\r\n    dispatcher({type:'TOGGLE_HISTORY_PAGE'})\r\n}","import React, { Component } from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\nimport './Sass/appComponent.scss';\r\n\r\nimport { currentPageChangedActionDispatcher } from './StateFunctions/actionDispatcherFunctions';\r\n\r\n\r\nclass App extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.handleStartButtonClick = this.handleStartButtonClick.bind(this);\r\n    }\r\n\r\n    handleStartButtonClick(){\r\n      \r\n      this.props.currentPageChangedActionDispatcher(this.props.currentPageNum);\r\n    }\r\n\r\n    render() {\r\n       \r\n      return (\r\n        <div className=\"app-page-container\">\r\n          <h1>Welcome to play Tic - Tac- Toe</h1>\r\n          <p> You can choose to play with another player and maintain the scores and history to get a championship kinda feeling :D</p>\r\n          <p> Click below button to get Started</p>\r\n          <button className=\"btn btn-center\" onClick={ this.handleStartButtonClick }>Let's Play</button>\r\n        </div>\r\n      );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n  return {\r\n    currentPageNum : store.appStateReducer.currentPageNumber,\r\n  }\r\n}\r\n\r\nconst mapDispatcherToProps = dispatch => {\r\n  \r\n  return {\r\n    currentPageChangedActionDispatcher : currentPageNum => dispatch(currentPageChangedActionDispatcher(currentPageNum)) ,\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatcherToProps)(App);\r\n","import React from 'react';\r\n\r\nconst MiddlePageComponent = props => {\r\n    return (\r\n        <React.Fragment>\r\n            { props.children }\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default MiddlePageComponent","import React from 'react'\r\n\r\nimport './../Sass/headerComponent.scss';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { newGameBtnClickedActionDispatcher } from './../StateFunctions/actionDispatcherFunctions';\r\n\r\nconst HeaderComponent = props => {\r\n    const { newGameBtnClickedHandler } = props;\r\n    return (\r\n        <header>\r\n            <div onClick = { newGameBtnClickedHandler} ><button className=\"logo\">Tic Tac</button></div>\r\n            <div className=\"header-tabs\">\r\n                <a href=\"\">Sign Up </a>\r\n                <a href=\"\">Log In </a>\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n    return{\r\n\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        newGameBtnClickedHandler : () => dispatch(newGameBtnClickedActionDispatcher()),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HeaderComponent);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { currentPageChangedActionDispatcher, updatePlayer1NameActionDispatcher, updatePlayer2NameActionDispatcher } from './../StateFunctions/actionDispatcherFunctions';\r\nimport './../Sass/personaldetailsComponent.scss';\r\n\r\nclass PersonalDetaisComponent extends Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.handleStartButtonClick = this.handleStartButtonClick.bind(this);\r\n    }\r\n\r\n    handleStartButtonClick(){  \r\n        this.props.currentPageChanged(this.props.currentPageNum);\r\n    }\r\n\r\n    render(){\r\n        \r\n        const  { player1Name, player2Name, updatePlayer1Name, updatePlayer2Name } = this.props;\r\n\r\n        return(\r\n            <div className=\"personaldetails-container\">\r\n                <div className=\"personaldetails-container-form-container\">\r\n                    \r\n                    <label htmlFor=\"firstPlayer\">First Player Name : </label>\r\n                    <input type=\"text\" id=\"firstPlayer\" value={ player1Name } onChange = { (e) => { updatePlayer1Name(e.target.value) } }/> <br/>\r\n                    \r\n                    <label htmlFor=\"secondPlayer\">Second Player Name : </label>\r\n                    <input type=\"text\" id = \"secondPlayer\" value={ player2Name } onChange = { (e) => { updatePlayer2Name(e.target.value) } }/>\r\n                    \r\n                    <button onClick = { this.handleStartButtonClick } className=\"btn btn-center\">\r\n                        Start The Game\r\n                    </button>\r\n                </div>\r\n\r\n            </div>\r\n            \r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        currentPageNum : store.appStateReducer.currentPageNumber,\r\n        player1Name : store.appStateReducer.player1Name,\r\n        player2Name : store.appStateReducer.player2Name,\r\n    }\r\n}\r\n\r\nconst mapDispatcherToProps = dispatch => {\r\n    \r\n    return {\r\n      currentPageChanged : currentPageNum => dispatch(currentPageChangedActionDispatcher(currentPageNum)),\r\n      updatePlayer1Name : (player1Name) => dispatch(updatePlayer1NameActionDispatcher(player1Name)),\r\n      updatePlayer2Name : (player2Name) => dispatch(updatePlayer2NameActionDispatcher(player2Name)),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatcherToProps)(PersonalDetaisComponent);","import React, { Component } from 'react';\r\nimport { getCellOnStatus } from './../StateFunctions/helperFunctions';\r\n\r\nimport './../Sass/gamePageComponent.scss';\r\nimport { ticTacCellClickedActionDispatcher } from './../StateFunctions/actionDispatcherFunctions';\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nclass TicTacCellComponent extends Component {\r\n    \r\n\r\n    render(){\r\n        const { id, status, ticTacCellClickedHandler, currentPlayerId } = this.props;\r\n\r\n        return(\r\n            <div className=\"tictac-cell\" onClick = { () => { ticTacCellClickedHandler(id, currentPlayerId) } }>\r\n                { getCellOnStatus(status) }\r\n            </div>\r\n        )\r\n    }\r\n    \r\n}\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        currentPlayerId : store.gameStateReducer.currentPlayerId\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        ticTacCellClickedHandler : (cellId, currentPlayerId) => dispatch(ticTacCellClickedActionDispatcher(cellId, currentPlayerId)),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TicTacCellComponent);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport './../Sass/gamePageComponent.scss';\r\n\r\nimport TicTacCellComponent from './../TicTacCellComponent/ticTacCellComponent';\r\n\r\nclass TicTacBoardComponent extends Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.getTictacBoardCellArray = this.getTictacBoardCellArray.bind(this);\r\n    }\r\n\r\n    getTictacBoardCellArray = () => {\r\n        const { defaultCellIdArray, player1CellIdArr, player2CellIdArr} = this.props;\r\n        const ticTacBoardArr = [];\r\n\r\n        for(let i=1; i<10; i++){\r\n            if(defaultCellIdArray.includes(i)){\r\n                ticTacBoardArr.push(<TicTacCellComponent key={i} id = {i} status={'default'} />)\r\n            }\r\n            else if(player2CellIdArr.includes(i)){\r\n                ticTacBoardArr.push(<TicTacCellComponent key={i} id = {i} status={'red'} />)\r\n            }\r\n            else if(player1CellIdArr.includes(i)){\r\n                ticTacBoardArr.push(<TicTacCellComponent key={i} id = {i} status={'green'} />)\r\n            }\r\n        }\r\n\r\n        return ticTacBoardArr;\r\n    }\r\n\r\n    render(){\r\n\r\n        return (\r\n            <div className=\"tictac-board-component\">\r\n                { this.getTictacBoardCellArray()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        defaultCellIdArray : store.gameStateReducer.defaultCellIdArray,\r\n        player1CellIdArr : store.gameStateReducer.player1CellIdArr,\r\n        player2CellIdArr : store.gameStateReducer.player2CellIdArr,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TicTacBoardComponent)","import React, { Component } from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nimport { toggleHistoryPageHandlerActionCreator } from './../StateFunctions/actionDispatcherFunctions';\r\nimport { getPlayerNameFromId } from './../StateFunctions/helperFunctions'\r\n\r\nclass HistoryPageComponent extends Component {\r\n    render(){\r\n        const { collapsedHistoryPageFlag, toggleHistoryPageHandler, gameHistory, player1Name, player2Name } = this.props;\r\n\r\n        const historyPageContentStyleObj = {\r\n                                                width : collapsedHistoryPageFlag ? '0' : '75%',\r\n                                                overflow: collapsedHistoryPageFlag ? 'hidden' : 'auto',\r\n\r\n                                            }\r\n        const toggleHisotoryPageButtonStyleObj = {\r\n                                                    left:collapsedHistoryPageFlag ? '0' : '75%',\r\n                                                }\r\n        return(\r\n            <React.Fragment>\r\n                <div style = { toggleHisotoryPageButtonStyleObj }onClick = { toggleHistoryPageHandler } id=\"toggle-history-page-btn\">\r\n                    <div className={ collapsedHistoryPageFlag === true ? \"open-sign\" : \"closed-sign\"}></div>\r\n                </div>\r\n\r\n                <div style = { historyPageContentStyleObj } className=\"history-page-container\">\r\n                    <div className=\"history-page-content\">\r\n\r\n                        <div className=\"row\">\r\n                            <div className=\"history-content-sno-col\">\r\n                                <strong>S. No.</strong>\r\n                            </div>\r\n\r\n                            <div className=\"history-content-result-col\">\r\n                                <strong>Result</strong>\r\n                            </div>\r\n\r\n                            <div className=\"history-content-winner-col\">\r\n                                <strong>Winner</strong>\r\n                            </div>\r\n                        </div>\r\n                        \r\n                        { gameHistory.map((gameHistoryObj, idx) => (\r\n                            <div className=\"row\">\r\n                                <div className=\"history-content-sno-col\">\r\n                                    <strong>{ idx + 1} </strong>\r\n                                </div>\r\n\r\n                                <div className=\"history-content-result-col\">\r\n                                    <strong>{ gameHistoryObj.isGameDrawn ? 'Game Drawn' : 'Resulted'}</strong>\r\n                                </div>\r\n\r\n                                <div className=\"history-content-winner-col\">\r\n                                    <strong>{ gameHistoryObj.isGameDrawn ? 'NA' : getPlayerNameFromId(gameHistoryObj.winnerId, [player1Name, player2Name]) }</strong>\r\n                                </div>\r\n                            </div>\r\n                        )) }\r\n                    </div>\r\n                </div>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        collapsedHistoryPageFlag : store.appStateReducer.collapsedHistoryPageFlag,\r\n        gameHistory : store.gameStateReducer.gameHistory,\r\n        player1Name : store.appStateReducer.player1Name,\r\n        player2Name : store.appStateReducer.player2Name,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        toggleHistoryPageHandler : () => dispatch(toggleHistoryPageHandlerActionCreator()),\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HistoryPageComponent)","import React,{ Component } from 'react';\r\nimport './../Sass/gamePageComponent.scss';\r\n\r\nimport HistoryPageComponent from './../HistoryPageComponent/historyPageComponent';\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nimport { toggleScoreBoardHandlerActionDispacther } from './../StateFunctions/actionDispatcherFunctions';\r\n\r\nclass ScoreBoardComponent extends Component {\r\n\r\n    \r\n\r\n    render(){\r\n        \r\n        const { player1Name, player2Name, player1Score, player2Score, totalGames, \r\n                numOfMatchesDrawn, numOfMatchesPlayer1Won, collapseScoreBoardFlag, toggleScoreBoardHandler } = this.props;\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <HistoryPageComponent />\r\n                <div onClick = { toggleScoreBoardHandler} className=\"score-card-header\">\r\n                    Score Board\r\n                </div>\r\n                <div style = {{height: collapseScoreBoardFlag ? '0' : 'auto', overflow:'hidden', transition:' height 0.3s'}} id=\"score-content-container\">\r\n                    <div className=\"score-card\">\r\n                        <div className=\"score-card-player-name-header\">{ player1Name } : <span className=\"score-card-player-score\">{ player1Score }</span></div>\r\n\r\n                        <div className=\"score-card-player-name-header\">{ player2Name } : <span className=\"score-card-player-score\">{ player2Score }</span></div>\r\n                        \r\n                    </div>\r\n                    <hr/>\r\n\r\n                    <div className=\"match-stats-card\">\r\n                        <div className=\"match-stats-header\">Total Games : <span className=\"match-stats-content\">{ totalGames }</span></div>\r\n                        <div className=\"match-stats-header\">{ player1Name } Won : <span className=\"match-stats-content\">{ numOfMatchesPlayer1Won }</span></div>\r\n                        <div className=\"match-stats-header\">{ player2Name } Won : <span className=\"match-stats-content\">{ totalGames - numOfMatchesDrawn - numOfMatchesPlayer1Won }</span></div>\r\n                        <div className=\"match-stats-header\">Matches Drawn : <span className=\"match-stats-content\">{ numOfMatchesDrawn }</span></div>\r\n                    </div>\r\n                </div>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        player1Name : store.appStateReducer.player1Name,\r\n        player2Name : store.appStateReducer.player2Name,\r\n        player1Score : store.appStateReducer.player1Score,\r\n        player2Score : store.appStateReducer.player2Score,\r\n        totalGames : store.gameStateReducer.totalGames,\r\n        numOfMatchesDrawn : store.gameStateReducer.numOfMatchesDrawn,\r\n        numOfMatchesPlayer1Won : store.gameStateReducer.numOfMatchesPlayer1Won,\r\n        collapseScoreBoardFlag : store.appStateReducer.collapseScoreBoardFlag,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        toggleScoreBoardHandler : () => dispatch(toggleScoreBoardHandlerActionDispacther())\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ScoreBoardComponent);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport './../Sass/gamePageComponent.scss';\r\n\r\nimport TicTacBoardComponent from './../TicTacBoardComponent/ticTacBoardComponent';\r\nimport ScoreBoardComponent from './../ScoreBoardComponent/scoreBoardComponent';\r\n\r\nimport { newGameBtnClickedActionDispatcher, resetBtnClickedActionDispatcher, \r\n        gameFinishActionDispatcher, updateGameHistoryActionDispatcher } from './../StateFunctions/actionDispatcherFunctions';\r\n\r\nimport { getPlayerNameFromId } from './../StateFunctions/helperFunctions'\r\n\r\nclass GamePageComponent extends Component {\r\n\r\n    componentWillReceiveProps(nextProps){\r\n        \r\n        const { gameFinishActionDispatcherHandler, isGameFinished, isGameDrawnFlag, winnerId } = nextProps;\r\n        \r\n        if(isGameFinished){\r\n            \r\n            if(!isGameDrawnFlag){\r\n                gameFinishActionDispatcherHandler(winnerId);\r\n            }\r\n            \r\n        }\r\n    }\r\n\r\n    render(){\r\n        const { newGameBtnClickedHandler, resetBtnClickedHandler, player1Name, player2Name, isGameFinished, isGameDrawnFlag, winnerId, currentPlayerId } = this.props;\r\n        \r\n        const playerHeaderStyleObj = currentPlayerId == 1 ? {\r\n            color: '#79ff4d'\r\n        }: {\r\n            color: '#ff704d'\r\n        }\r\n        \r\n        return (\r\n\r\n            <div className=\"game-page-container\">\r\n                <div className=\"score-board-container\">\r\n                    <ScoreBoardComponent />\r\n                </div>\r\n\r\n                <div className=\"game-board-container\">\r\n                    <div>\r\n\r\n                        {!isGameFinished && (\r\n                            <div className=\"player-header\">\r\n                                <h3 style = { playerHeaderStyleObj }>Current Player : { getPlayerNameFromId(currentPlayerId, [player1Name, player2Name]) }</h3>\r\n                            </div>\r\n                        )\r\n                        }\r\n                        { !isGameFinished && <TicTacBoardComponent /> }\r\n                        \r\n                        { isGameFinished && ( isGameDrawnFlag ? (\r\n                                                                    <div className=\"draw-message-container\">\r\n                                                                        <h2>Game is Drawn :| </h2>\r\n                                                                        <h4>Better Luck Next Time</h4>\r\n                                                                        <p>Press Reset to continue to another game</p>\r\n                                                                    </div>\r\n                                                                ) \r\n                                                            : (\r\n                                                                <div className=\"congrats-message-container\">\r\n                                                                        <h2> Congratulations { getPlayerNameFromId(winnerId, [player1Name, player2Name]) } !! </h2>\r\n                                                                        <h2>You Are the Winner :)</h2>\r\n                                                                        <p>Press Reset to continue to another game</p>\r\n                                                                </div>\r\n                                                              )\r\n                                            )\r\n                        }\r\n\r\n                        <div className=\"game-board-btn-container\">\r\n                            <button onClick = { newGameBtnClickedHandler} className=\"btn\">New Game</button>\r\n                            <button onClick = { resetBtnClickedHandler } className=\"btn\">Reset</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n    return{\r\n        isGameFinished : store.gameStateReducer.isGameFinished,\r\n        winnerId : store.gameStateReducer.winnerId,\r\n        currentPlayerId : store.gameStateReducer.currentPlayerId,\r\n        player1Name : store.appStateReducer.player1Name,\r\n        player2Name : store.appStateReducer.player2Name,\r\n        isGameDrawnFlag : store.gameStateReducer.isGameDrawnFlag,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        newGameBtnClickedHandler : () => dispatch(newGameBtnClickedActionDispatcher()),\r\n        resetBtnClickedHandler : () => dispatch(resetBtnClickedActionDispatcher()),\r\n        gameFinishActionDispatcherHandler : (winnerId) => dispatch(gameFinishActionDispatcher(winnerId)),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GamePageComponent);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport App from './App';\r\nimport './Sass/main.scss';\r\n\r\nimport MiddlePageComponent from './MiddlePageComponent/middlePageComponent';\r\nimport HeaderComponent from './HeaderComponent/headerComponent';\r\nimport PersonalDetaisComponent from './PersonalDetailsComponent/personalDetailsComponent';\r\nimport GamePageComponent from './GamePageComponent/gamePageComponent';\r\n\r\nclass LayoutComponent extends Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.getLayoutPage = this.getLayoutPage.bind(this);\r\n    }\r\n\r\n    getLayoutPage(){\r\n        const { currentPageNumber } = this.props;\r\n\r\n        switch(currentPageNumber){\r\n            case 2:\r\n                return <PersonalDetaisComponent />\r\n            case 3:\r\n                return <GamePageComponent />\r\n            default : \r\n                return <App />\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const { currentPageNumber } = this.props;\r\n        \r\n        return (\r\n                <div className=\"layout-container\">\r\n                    <HeaderComponent />\r\n                    <div className=\"middle-page-container\">\r\n                        <MiddlePageComponent>\r\n                            { this.getLayoutPage() }\r\n                        </MiddlePageComponent>\r\n                    </div>\r\n                </div>\r\n            )\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        currentPageNumber : store.appStateReducer.currentPageNumber,\r\n    }\r\n}\r\n\r\nconst mapDispatcherToProps = dispatch => {\r\n    return {\r\n\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatcherToProps)(LayoutComponent);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Provider } from 'react-redux';\nimport rootReducer from './Reducers/rootreducer';\nimport './index.css';\nimport Layout from './LayoutComponent.js';\nimport { createStore, applyMiddleware } from 'redux';\nimport * as serviceWorker from './serviceWorker';\nimport thunk from 'redux-thunk'\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nReactDOM.render(<Provider store = {store}>\n                    <Layout />\n                </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}